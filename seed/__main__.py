# This is adapted very directly from nameko/cli/run.py.
# The differences are:
# * we trap SIGINT as well as SIGTERM, because this is the signal generated by
#   Ctrl-C in Windows
# * we don't monkey-patch threads because it breaks pyserial's
#   threaded.ReaderThread

import eventlet
eventlet.monkey_patch(thread=False)  # noqa (code before rest of imports)

import errno
import signal

from nameko.constants import AMQP_URI_CONFIG_KEY
from nameko.runners import ServiceRunner

#[[[cog
#   import cog
#   cog.outl('from {} import Service'.format(service_name))
#]]]
#[[[end]]]


def run(config):
    service_runner = ServiceRunner(config)
    service_runner.add_service(Service)

    def shutdown(signum, frame):
        # signal handlers are run by the MAINLOOP and cannot use eventlet
        # primitives, so we have to call `stop` in a greenlet
        eventlet.spawn_n(service_runner.stop)

    signal.signal(signal.SIGTERM, shutdown)
    signal.signal(signal.SIGINT, shutdown)

    service_runner.start()

    # if the signal handler fires while eventlet is waiting on a socket,
    # the __main__ greenlet gets an OSError(4) "Interrupted system call".
    # This is a side-effect of the eventlet hub mechanism. To protect nameko
    # from seeing the exception, we wrap the runner.wait call in a greenlet
    # spawned here, so that we can catch (and silence) the exception.
    runnlet = eventlet.spawn(service_runner.wait)

    while True:
        try:
            runnlet.wait()
        except OSError as exc:
            if exc.errno == errno.EINTR:
                # this is the OSError(4) caused by the signalhandler.
                # ignore and go back to waiting on the runner
                continue
            raise
        except KeyboardInterrupt:
            print()  # looks nicer with the ^C e.g. bash prints in the terminal
            try:
                service_runner.stop()
            except KeyboardInterrupt:
                print()  # as above
                service_runner.kill()
        else:
            # runner.wait completed
            break


def main():
    config = {
        AMQP_URI_CONFIG_KEY: 'amqp://guest:guest@localhost'
    }
    run(config)


if __name__ == '__main__':
    main()
